<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>enum</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>CodeBlock</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>

indirect enum ArithmeticExpression {
	case number(Int)
	case addition(ArithmeticExpression,		    ArithmeticExpression)
	case multiplication(ArithmeticExpression, ArithmeticExpression)
}

let five	  = ArithmeticExpression.number(5)
let four	  = ArithmeticExpression.number(4)
let sum		  = ArithmeticExpression.addition(five, four)
let product	= ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))

func evaluate(_ expression: ArithmeticExpression) -&gt; Int {
    switch expression {
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}

print(evaluate(product))


/**/

enum NumberCategory {
   case Small
   case Medium
   case Big
   case Huge
   init(number n: Int) {
	if n &lt; 10000 { self = .Small }
	else if n &lt; 1000000 { self = .Medium }
	else if n &lt; 100000000 { self = .Big }
	else { self = .Huge }
   }
}
let aNumber = NumberCategory(number: 100)
print(aNumber)
// prints: "Small"</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>5AABC6DE-64EA-421B-9B5B-4E30EE8D2EF1</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Advanced Enum</string>
	<key>IDECodeSnippetTitle</key>
	<string>My Advanced Enum</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
